var VARSYM
x IDENT
, COM
y IDENT
, COM
z IDENT
, COM
q IDENT
, COM
r IDENT
, COM
n IDENT
, COM
f IDENT
; SEMI
procedure PROCEDURESYM
multiply IDENT
; SEMI
var VARSYM
a IDENT
, COM
b IDENT
; SEMI
begin BEGINSYM
a IDENT
:= ASSIGN
x IDENT
; SEMI
b IDENT
:= ASSIGN
y IDENT
; SEMI
z IDENT
:= ASSIGN
x IDENT
* MUL
y IDENT
end ENDSYM
; SEMI
procedure PROCEDURESYM
divide IDENT
; SEMI
var VARSYM
w IDENT
; SEMI
begin BEGINSYM
r IDENT
:= ASSIGN
x IDENT
; SEMI
q IDENT
:= ASSIGN
0 NUMBER
; SEMI
w IDENT
:= ASSIGN
y IDENT
; SEMI
while WHILESYM
w IDENT
<= LTOREQ
r IDENT
do DOSYM
w IDENT
:= ASSIGN
2 NUMBER
* MUL
w IDENT
; SEMI
while WHILESYM
w IDENT
> GT
y IDENT
do DOSYM
begin BEGINSYM
q IDENT
:= ASSIGN
2 NUMBER
* MUL
q IDENT
; SEMI
w IDENT
:= ASSIGN
w IDENT
/ DIV
2 NUMBER
; SEMI
if IFSYM
w IDENT
<= LTOREQ
r IDENT
then THENSYM
begin BEGINSYM
r IDENT
:= ASSIGN
r IDENT
- SUB
w IDENT
; SEMI
q IDENT
:= ASSIGN
q IDENT
+ ADD
1 NUMBER
end ENDSYM
end ENDSYM
end ENDSYM
; SEMI
procedure PROCEDURESYM
gcd IDENT
; SEMI
var VARSYM
g IDENT
; SEMI
begin BEGINSYM
f IDENT
:= ASSIGN
x IDENT
; SEMI
g IDENT
:= ASSIGN
y IDENT
; SEMI
while WHILESYM
f IDENT
# NOTEQL
g IDENT
do DOSYM
begin BEGINSYM
if IFSYM
f IDENT
< LT
g IDENT
then THENSYM
g IDENT
:= ASSIGN
g IDENT
- SUB
f IDENT
; SEMI
if IFSYM
g IDENT
< LT
f IDENT
then THENSYM
f IDENT
:= ASSIGN
f IDENT
- SUB
g IDENT
end ENDSYM
; SEMI
z IDENT
:= ASSIGN
f IDENT
end ENDSYM
; SEMI
procedure PROCEDURESYM
fact IDENT
; SEMI
begin BEGINSYM
if IFSYM
n IDENT
> GT
1 NUMBER
then THENSYM
begin BEGINSYM
f IDENT
:= ASSIGN
n IDENT
* MUL
f IDENT
; SEMI
n IDENT
:= ASSIGN
n IDENT
- SUB
1 NUMBER
; SEMI
call CALLSYM
fact IDENT
end ENDSYM
end ENDSYM
; SEMI
begin BEGINSYM
read READSYM
( LPARE
x IDENT
) RPARE
; SEMI
read READSYM
( LPARE
y IDENT
) RPARE
; SEMI
call CALLSYM
multiply IDENT
; SEMI
write WRITESYM
( LPARE
z IDENT
) RPARE
; SEMI
read READSYM
( LPARE
x IDENT
) RPARE
; SEMI
read READSYM
( LPARE
y IDENT
) RPARE
; SEMI
call CALLSYM
divide IDENT
; SEMI
write WRITESYM
( LPARE
q IDENT
) RPARE
; SEMI
write WRITESYM
( LPARE
r IDENT
) RPARE
; SEMI
read READSYM
( LPARE
x IDENT
) RPARE
; SEMI
read READSYM
( LPARE
y IDENT
) RPARE
; SEMI
call CALLSYM
gcd IDENT
; SEMI
write WRITESYM
( LPARE
z IDENT
) RPARE
; SEMI
read READSYM
( LPARE
n IDENT
) RPARE
; SEMI
f IDENT
:= ASSIGN
1 NUMBER
; SEMI
call CALLSYM
fact IDENT
; SEMI
write WRITESYM
( LPARE
f IDENT
) RPARE
end ENDSYM
. END
